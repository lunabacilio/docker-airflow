----------------
--> In a container 

1) Creating a folder 

 mkdir airflow

2) Running the container

 - docker run -d -p 8080:8080 -v <YOUR-PATH>:/usr/local/ airflow/dags puckel/docker-airflow airflow

3) Creating a sample file "Helloworld.py" (you can copy below code)

cd airflow

vi Helloworld.py
-------------------->
from airflow import DAG
from airflow.operators import BashOperator
from datetime import datetime, timedelta

# Following are defaults which can be overridden later on
default_args = {
     'owner': 'manasi',
     'depends_on_past': False,
     'start_date': datetime(2016, 4, 15),
     'email': ['manasidalvi14@gmail.com'],
     'email_on_failure': False,
     'email_on_retry': False,
     'retries': 1,
     'retry_delay': timedelta(minutes=1),
     }
dag = DAG('Helloworld', default_args=default_args)

# t1, t2, t3 and t4 are examples of tasks created using operators

t1 = BashOperator(
     task_id='task_1',
     bash_command='echo "Hello World from Task 1"',
     dag=dag)

t2 = BashOperator(
     task_id='task_2',
     bash_command='echo "Hello World from Task 2"',
     dag=dag)

t3 = BashOperator(
     task_id='task_3',
     bash_command='echo "Hello World from Task 2"',
     dag=dag)

t4 = BashOperator(
     task_id='task_4',
     bash_command='echo "Hello World from Task 4"',
     dag=dag)

t2.set_upstream(t1)
t3.set_upstream(t1)
t4.set_upstream(t2)
t4.set_upstream(t3)
<-----------------------------------------------

4) Inside of the container

  docker exec -it <CONTAINER_ID> bash

5) Run the next commands
 
  airflow list_dags

  airflow list_tasks Helloworld

  airflow test Helloworld 2020-07-01(current date)

  airflow backfill Helloworld -s 2020-06-30 -e 2020-07-01

******************************************************************************
With Docker compose:

For local: 
  docker-compose -f docker-compose-LocalExecutor.yml up -d

For Celery:
  docker-compose -f docker-compose-CeleryExecutor.yml up -d

---- At least the test was a trouble with vagrant and linux academy machines

****************************************************************************
     USING Docker stack
docker swarm init
---
docker swarm join --token <YOUR-TOKEN>

--

docker node ls

docker stack deploy --compose-file docker-compose-LocalExecutor.yml airflow

docker stack ls

docker service ls

docker exec -it <CONTAINER_ID> bash

--------> This service shows next error

  Using the first command inside the container 
  
  airflow list_dags
	
    Image: ERROR-dockerstack

----> I got some errors using docker swarm and stack but with a simple container works
----> Errors are using commands inside of containers

